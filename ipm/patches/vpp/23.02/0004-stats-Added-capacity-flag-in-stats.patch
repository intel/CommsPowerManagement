From 8211a9b709d3d23c43935cf131462357a1508886 Mon Sep 17 00:00:00 2001
From: Hoang Nguyen <hoang1x.nguyen@intel.com>
Date: Thu, 3 Oct 2024 15:33:43 +0000
Subject: [PATCH 1/1] stats: Added capacity flag in stats

Busyness is calculated on how busy the current core is, ignoring the
current frequency. So a core that's 50% busy at P1 (e.g. 2GHz), shows
as 100% busy at 1GHz.

This patch adds a new 'capacity' metric that shows a percentage based on
the P1 (base) freqency of the core, so that if the core is 50% busy at
P1, it should show 50% regardless of what the current frequency is.

---
 src/vlib/cli.c                |  32 +++++
 src/vlib/main.h               |   1 +
 src/vlib/stats/collector.c    |   1 +
 src/vlib/stats/provider_mem.c | 233 ++++++++++++++++++++++++++++++++++
 src/vlib/stats/stats.h        |   1 +
 5 files changed, 268 insertions(+)

diff --git a/src/vlib/cli.c b/src/vlib/cli.c
index 3c5b7b533..719007d68 100644
--- a/src/vlib/cli.c
+++ b/src/vlib/cli.c
@@ -1018,6 +1018,38 @@ VLIB_CLI_COMMAND (show_cpu_load_command, static) = {
 };
 /* *INDENT-ON* */
 
+static clib_error_t *
+show_cpu_capacity (vlib_main_t * vm, unformat_input_t * input,
+               vlib_cli_command_t * cmd)
+{
+  uword i;
+
+  vlib_cli_output (vm, "%10s | %10s | %12s", "Thread", "Core", "Load %");
+
+  for (i = 0; i < vlib_get_n_threads (); i++)
+    {
+      vlib_main_t *vm_i;
+
+      vm_i = vlib_get_main_by_index (i);
+      if (!vm_i)
+        continue;
+
+      vlib_cli_output (vm, "%8u   | %8u   |   %8.2f", i, vm_i->cpu_id,
+              (f64)vm_i->cpu_capacity / 100.0);
+    }
+
+  return 0;
+}
+
+/* *INDENT-OFF* */
+VLIB_CLI_COMMAND (show_cpu_load_capacity, static) = {
+  .path = "show cpu capacity",
+  .short_help = "Show cpu capacity",
+  .function = show_cpu_capacity,
+  .is_mp_safe = 1,
+};
+/* *INDENT-ON* */
+
 static clib_error_t *
 show_cpu (vlib_main_t * vm, unformat_input_t * input,
 	  vlib_cli_command_t * cmd)
diff --git a/src/vlib/main.h b/src/vlib/main.h
index b5f3bc057..4aeef8dd2 100644
--- a/src/vlib/main.h
+++ b/src/vlib/main.h
@@ -121,6 +121,7 @@ typedef struct vlib_main_t
   u64 cpu_load_clocks;
   u32 cpu_load_points;
   u32 cpuload_burst;
+  u64 cpu_capacity;
 
   /* Incremented once for each main loop. */
   volatile u32 main_loop_count;
diff --git a/src/vlib/stats/collector.c b/src/vlib/stats/collector.c
index dafa210be..6d24917c6 100644
--- a/src/vlib/stats/collector.c
+++ b/src/vlib/stats/collector.c
@@ -174,6 +174,7 @@ stat_segment_collector_process (vlib_main_t *vm, vlib_node_runtime_t *rt,
   u32 num_worker_thread = vlib_get_n_threads () - 1;
   vlib_stats_provider_register_cpu_util (num_worker_thread);
   vlib_stats_provider_register_queue_burst (num_worker_thread);
+  vlib_stats_provider_register_cpu_capacity (num_worker_thread);
   while (1)
     {
       do_stat_segment_updates (vm, sm);
diff --git a/src/vlib/stats/provider_mem.c b/src/vlib/stats/provider_mem.c
index 6840ec0d1..f1c5e166d 100644
--- a/src/vlib/stats/provider_mem.c
+++ b/src/vlib/stats/provider_mem.c
@@ -5,6 +5,22 @@
 #include <vlib/vlib.h>
 #include <vlib/unix/unix.h>
 #include <vlib/stats/stats.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#define MSR_PLATFORM_INFO 0xCE
+#define POWER_SYSFS_CUR_PATH    "/sys/devices/system/cpu/cpu%u/cpufreq/scaling_cur_freq"
+#define POWER_SYSFS_BASE_FREQ_PATH    "/sys/devices/system/cpu/cpu%u/cpufreq/base_frequency"
+#define POWER_SYSFS_SCALING_DRIVER_PATH    "/sys/devices/system/cpu/cpu%u/cpufreq/scaling_driver"
+#define POWER_SYSFS_SCALING_MAX_FREQ_PATH    "/sys/devices/system/cpu/cpu%u/cpufreq/scaling_max_freq"
+#define POWER_SYSFS_MSR_PATH    "/dev/cpu/%u/msr"
+
+#define MAX_LCORE 1280
+#define PATH_MAX  4096
+int current_fds[MAX_LCORE] = {0};
+static int p1_freq[MAX_LCORE] = {0};
 
 static clib_mem_heap_t **memory_heaps_vec;
 
@@ -19,6 +35,173 @@ enum
   STAT_MEM_RELEASABLE,
 } stat_mem_usage_e;
 
+static int
+try_read_base_frequency(unsigned int lcore_id)
+{
+	char path[PATH_MAX];
+	int fd;
+	snprintf(path, sizeof(path), POWER_SYSFS_BASE_FREQ_PATH, lcore_id);
+
+	fd = open(path, O_RDONLY);
+	if (fd == -1) {
+		return -1;
+	}
+	char buffer[16];
+	ssize_t bytesRead = pread(fd, buffer, sizeof(buffer) - 1, 0);
+	if (bytesRead == -1) {
+		return -1;
+	}
+	buffer[bytesRead] = '\0'; // Null-terminate the buffer
+	close(fd);
+
+	p1_freq[lcore_id] = atoi(buffer);
+	return p1_freq[lcore_id];
+
+
+}
+
+static int
+try_read_scaling_max_freq(unsigned int lcore_id)
+{
+	char path[PATH_MAX];
+	int freq;
+	int fd;
+
+	/*
+	 * If the driver is acpi_cpufreq, we can read the scaling_max_freq file
+	 */
+	snprintf(path, sizeof(path), POWER_SYSFS_SCALING_DRIVER_PATH, lcore_id);
+	fd = open(path, O_RDONLY);
+	if (fd == -1) {
+		return -1;
+	}
+	char buffer[16];
+	ssize_t bytesRead = pread(fd, buffer, sizeof(buffer) - 1, 0);
+	if (bytesRead == -1) {
+		return -1;
+	}
+	buffer[bytesRead] = '\0'; // Null-terminate the buffer
+
+	close(fd);
+
+	if (strncmp(buffer, "acpi-cpufreq", 12) == 0) {
+		/* we can use the scaling_max_freq to get the p1 */
+		snprintf(path, sizeof(path), POWER_SYSFS_SCALING_MAX_FREQ_PATH, lcore_id);
+		fd = open(path, O_RDONLY);
+		if (fd == -1) {
+			return -1;
+		}
+		ssize_t bytesRead = pread(fd, buffer, sizeof(buffer) - 1, 0);
+		if (bytesRead == -1) {
+			return -1;
+		}
+		buffer[bytesRead] = '\0'; // Null-terminate the buffer
+		close(fd);
+		freq = atoi(buffer) / 1000; /* convert to KHz */
+
+		/*
+		 * If the freq value ends with '1', then, turbo is enabled.
+		 * Round it down to the nearest 100. Otherwuse use the value.
+		 */
+		return (freq & ~1) * 1000; /* convert to Hz */
+	}
+	return -1;
+}
+
+static int
+try_read_msr(unsigned int lcore_id)
+{
+	char path[PATH_MAX];
+	int fd;
+	int freq;
+	uint64_t data;
+
+	/*
+	 * If the msr driver is present, we can read p1 from MSR_PLATFORM_INFO register
+	 */
+	snprintf(path, sizeof(path), POWER_SYSFS_MSR_PATH, lcore_id);
+	fd = open(path, O_RDONLY);
+	if (fd < 0) {
+		return -1;
+	}
+
+	if (pread(fd, &data, sizeof(data), MSR_PLATFORM_INFO) != sizeof(data)) {
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+
+	freq = ((data >> 8) & 0xff) * 100 * 1000;
+
+	return freq;
+}
+
+
+static
+int read_sysfs_p1_freq(unsigned int lcore_id) {
+	int freq;
+
+	/* We've previously got the p1 frequency. */
+	if (p1_freq[lcore_id] != 0)
+		return p1_freq[lcore_id];
+
+	/*
+	 * Check the base_frequency file, if it's there
+	 */
+	freq = try_read_base_frequency(lcore_id);
+	if (freq != -1) {
+		p1_freq[lcore_id] = freq;
+		return freq;
+	}
+
+	/*
+	 * Check the scaling_max_freq file for the acpi-freq driver
+	 */
+	freq = try_read_scaling_max_freq(lcore_id);
+	if (freq != -1) {
+		p1_freq[lcore_id] = freq;
+		return freq;
+	}
+
+	/*
+	 * Try reading from the MSR register
+	 */
+	freq = try_read_msr(lcore_id);
+	if (freq != -1) {
+		p1_freq[lcore_id] = freq;
+		return freq;
+	}
+
+	return -1;
+}
+
+static
+int read_sysfs_cur_freq(unsigned int lcore_id) {
+	char path[PATH_MAX];
+
+	if (current_fds[lcore_id] == 0) {
+		sprintf(path, POWER_SYSFS_CUR_PATH, lcore_id);
+		current_fds[lcore_id] = open(path, O_RDONLY);
+		if (current_fds[lcore_id] == -1) {
+			perror("Failed to open file");
+			return -1;
+		}
+	}
+
+    char buffer[16];
+    ssize_t bytesRead = pread(current_fds[lcore_id], buffer, sizeof(buffer) - 1, 0);
+    if (bytesRead == -1) {
+        perror("Failed to read file");
+        return -1;
+    }
+
+    buffer[bytesRead] = '\0'; // Null-terminate the buffer
+
+    int value = atoi(buffer);
+    return value;
+}
+
 /*
  * Called from the stats periodic process to update memory counters.
  */
@@ -120,6 +303,35 @@ stat_provider_queue_burst_per_thread_update_fn (
     }
 }
 
+static void
+stat_provider_capacity_per_thread_update_fn (
+  vlib_stats_collector_data_t *d)
+{
+  vlib_main_t *this_vlib_main;
+  int i;
+  ASSERT (d->entry->data);
+  counter_t **counters = d->entry->data;
+  counter_t *cb;
+  int core_id = 0;
+
+  for (i = 0; i < vlib_get_n_threads (); i++)
+    {
+      this_vlib_main = vlib_get_main_by_index (i);
+      core_id = this_vlib_main->cpu_id;
+      int cur_freq = read_sysfs_cur_freq(core_id);
+      int p1 = read_sysfs_p1_freq(core_id) ;
+      /* Set the per-worker capacity */
+      cb = counters[i];
+      if (p1 <= 0) {
+        this_vlib_main->cpu_capacity = 0;
+      } else {
+        this_vlib_main->cpu_capacity = (u64)this_vlib_main->cpu_load_points * cur_freq/p1;
+      }
+      /* Lower 8-bits is capacity flag and rest is core id */
+      cb[0] = ((this_vlib_main->cpu_id << 8) | (this_vlib_main->cpu_capacity/100));
+    }
+}
+
 void
 vlib_stats_provider_register_cpu_util (u32 num_workers)
 {
@@ -161,3 +373,24 @@ vlib_stats_provider_register_queue_burst (u32 num_workers)
   r.collect_fn = stat_provider_queue_burst_per_thread_update_fn;
   vlib_stats_register_collector_fn (&r);
 }
+
+void
+vlib_stats_provider_register_cpu_capacity (u32 num_workers)
+{
+  vlib_stats_collector_reg_t r = {};
+
+  u32 idx;
+  r.entry_index = idx = vlib_stats_add_counter_vector ("/sys/capacity_per_worker");
+  if (idx == ~0)
+    ASSERT (0);
+
+  vlib_stats_segment_t *sm = vlib_stats_get_segment ();
+  vlib_stats_segment_lock ();
+  vlib_stats_entry_t *ep = &sm->directory_vector[idx];
+  ep->data = stat_validate_counter_vector3 (ep->data, num_workers, 0);
+  vlib_stats_segment_unlock ();
+
+  r.private_data = 1;
+  r.collect_fn = stat_provider_capacity_per_thread_update_fn;
+  vlib_stats_register_collector_fn (&r);
+}
diff --git a/src/vlib/stats/stats.h b/src/vlib/stats/stats.h
index 877f56770..e0f818acd 100644
--- a/src/vlib/stats/stats.h
+++ b/src/vlib/stats/stats.h
@@ -162,6 +162,7 @@ u32 vlib_stats_find_entry_index (char *fmt, ...);
 void vlib_stats_register_collector_fn (vlib_stats_collector_reg_t *r);
 void vlib_stats_provider_register_cpu_util (u32 num_workers);
 void vlib_stats_provider_register_queue_burst (u32 num_workers);
+void vlib_stats_provider_register_cpu_capacity (u32 num_workers);
 
 f64
 vlib_get_stat_segment_cpuload_rate (void);
-- 
2.25.1

