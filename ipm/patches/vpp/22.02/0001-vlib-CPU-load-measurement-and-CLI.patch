From 385ec804d75b7ba91395c8ccdaa0199062fa2175 Mon Sep 17 00:00:00 2001
From: Vishal Deep Ajmera <vishal.ajmera@intel.com>
Date: Thu, 17 Nov 2022 09:57:59 +0000
Subject: [PATCH 1/2] vlib: CPU load measurement and CLI

The patch calculates CPU load based on number of ticks ellapsed in
processing packets by main/worker thread.

New CLI command to query CPU load:
`show cpu load`

Type: improvement
---
 src/vlib/cli.c  | 32 ++++++++++++++++++++++++++++++++
 src/vlib/main.c | 15 +++++++++++++++
 src/vlib/main.h |  6 ++++++
 3 files changed, 53 insertions(+)

diff --git a/src/vlib/cli.c b/src/vlib/cli.c
index a00ae6245..c1ae5f7c6 100644
--- a/src/vlib/cli.c
+++ b/src/vlib/cli.c
@@ -934,6 +934,38 @@ VLIB_CLI_COMMAND (show_memory_usage_command, static) = {
 };
 /* *INDENT-ON* */
 
+static clib_error_t *
+show_cpu_load (vlib_main_t * vm, unformat_input_t * input,
+               vlib_cli_command_t * cmd)
+{
+  uword i;
+
+  vlib_cli_output (vm, "%10s | %10s | %12s", "Thread", "Core", "Load %");
+
+  for (i = 0; i < vlib_get_n_threads (); i++)
+    {
+      vlib_main_t *vm_i;
+
+      vm_i = vlib_get_main_by_index (i);
+      if (!vm_i)
+        continue;
+
+      vlib_cli_output (vm, "%8u   | %8u   |   %8.2f", i, vm_i->cpu_id,
+              (f64)vm_i->cpu_load_points / 100.0);
+    }
+
+  return 0;
+}
+
+/* *INDENT-OFF* */
+VLIB_CLI_COMMAND (show_cpu_load_command, static) = {
+  .path = "show cpu load",
+  .short_help = "Show cpu load",
+  .function = show_cpu_load,
+  .is_mp_safe = 1,
+};
+/* *INDENT-ON* */
+
 static clib_error_t *
 show_cpu (vlib_main_t * vm, unformat_input_t * input,
 	  vlib_cli_command_t * cmd)
diff --git a/src/vlib/main.c b/src/vlib/main.c
index 189884a97..8964bab5d 100644
--- a/src/vlib/main.c
+++ b/src/vlib/main.c
@@ -992,6 +992,9 @@ dispatch_node (vlib_main_t * vm,
 				      /* n_vectors */ n,
 				      /* n_clocks */ t - last_time_stamp);
 
+  if (n)
+    vm->cpu_load_clocks += t - last_time_stamp;
+
   /* When in adaptive mode and vector rate crosses threshold switch to
      polling mode and vice versa. */
   if (PREDICT_FALSE (node->flags & VLIB_NODE_FLAG_ADAPTIVE_MODE))
@@ -1692,6 +1695,18 @@ vlib_main_or_worker_loop (vlib_main_t * vm, int is_main)
       /* Record time stamp in case there are no enabled nodes and above
          calls do not update time stamp. */
       cpu_time_now = clib_cpu_time_now ();
+      /* Time to update cpu load? */
+      if (PREDICT_FALSE (cpu_time_now >= vm->cpu_load_interval_end) )
+        {
+          if (vm->cpu_load_interval_start)
+            {
+              vm->cpu_load_points = (vm->cpu_load_clocks * 1e4) /
+                  (cpu_time_now - vm->cpu_load_interval_start);
+            }
+          vm->cpu_load_interval_start = cpu_time_now;
+          vm->cpu_load_interval_end = cpu_time_now + 1e9;
+          vm->cpu_load_clocks = 0;
+        }
       vm->loops_this_reporting_interval++;
       now = clib_time_now_internal (&vm->clib_time, cpu_time_now);
       /* Time to update loops_per_second? */
diff --git a/src/vlib/main.h b/src/vlib/main.h
index a16f603f4..293484e67 100644
--- a/src/vlib/main.h
+++ b/src/vlib/main.h
@@ -114,6 +114,12 @@ typedef struct vlib_main_t
   /* Time stamp when main loop was entered (time 0). */
   u64 cpu_time_main_loop_start;
 
+  /* CPU load measurement */
+  u64 cpu_load_interval_start;
+  u64 cpu_load_interval_end;
+  u64 cpu_load_clocks;
+  u32 cpu_load_points;
+
   /* Incremented once for each main loop. */
   volatile u32 main_loop_count;
 
-- 
2.25.1

